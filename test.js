// Generated by CoffeeScript 1.5.0
(function() {
  var assert, geojson, wikigeo;

  wikigeo = require('./wikigeo');

  geojson = wikigeo.geojson;

  assert = require('chai').assert;

  describe('wikigeo', function() {
    return describe('geojson', function() {
      it('should work with just lat/lon', function(done) {
        return geojson([40.67, -73.94], function(data) {
          var f;
          assert.equal(data.type, "FeatureCollection");
          assert.ok(data.features);
          assert.ok(Array.isArray(data.features));
          assert.ok(data.features.length > 0 && data.features.length <= 10);
          f = data.features[0];
          assert.ok(f.id);
          assert.match(f.id, /http:\/\/en.wikipedia.org\/wiki\/.+/);
          assert.equal(f.type, "Feature");
          assert.ok(f.properties);
          assert.ok(f.properties.name);
          assert.ok(f.properties.image);
          assert.ok(f.geometry);
          assert.equal(f.geometry.type, "Point");
          assert.ok(f.geometry.coordinates);
          assert.equal(typeof f.geometry.coordinates[0], "number");
          assert.equal(typeof f.geometry.coordinates[1], "number");
          return done();
        });
      });
      it('should return empty results when there are no hits', function(done) {
        return geojson([39.0114, 77.0155], function(data) {
          assert.equal(data.type, "FeatureCollection");
          assert.ok(data.features);
          assert.ok(Array.isArray(data.features));
          assert.equal(data.features.length, 0);
          return done();
        });
      });
      it('limit should cause more results to come in', function(done) {
        return geojson([40.67, -73.94], {
          limit: 15
        }, function(data) {
          assert.ok(data.features.length > 10 && data.features.length < 15);
          return done();
        });
      });
      it('respects maximum limit', function() {
        var doit;
        doit = function() {
          return geojson([40.67, -73.94], {
            limit: 501
          }, function(data) {});
        };
        return assert.throws(doit, 'limit cannot be greater than 500');
      });
      return it('respects maximum radius', function() {
        var doit;
        doit = function() {
          return geojson([40.67, -73.94], {
            radius: 10001
          }, function(data) {});
        };
        return assert.throws(doit, 'radius cannot be greater than 10000');
      });
    });
  });

}).call(this);
