// Generated by CoffeeScript 1.5.0

/*

geojson takes a latitude and longitude and a callback that will be given 
geojson for Wikipedia articles that are relevant for that location

options:
  radius: search radius in meters (default: 1000, max: 10000)
  limit: the number of wikipedia articles to limit to (default: 10, max: 500)

example:
  geojson([39.0114, -77.0155], {radius: 5000}, function(data) {
    console.log(data);
  })
*/


(function() {
  var fetch, geojson, request, root, _browserFetch, _convert, _fetch, _search,
    _this = this;

  geojson = function(latlon, opts, callback) {
    if (opts == null) {
      opts = {};
    }
    if (typeof opts === "function") {
      callback = opts;
      opts = {};
    }
    if (!opts.limit) {
      opts.limit = 10;
    }
    if (!opts.radius) {
      opts.radius = 10000;
    }
    if (opts.radius > 10000) {
      throw new Error("radius cannot be greater than 10000");
    }
    if (opts.limit > 500) {
      throw new Error("limit cannot be greater than 500");
    }
    return _search(latlon[0], latlon[1], opts.radius, opts.limit, callback);
  };

  _search = function(lat, lon, radius, limit, callback, results, queryContinue) {
    var continueParams, name, param, q, url;
    url = "http://en.wikipedia.org/w/api.php";
    q = {
      action: "query",
      prop: "info|extracts|coordinates|pageprops",
      exlimit: "max",
      exintro: 1,
      explaintext: 1,
      generator: "geosearch",
      ggsradius: radius,
      ggscoord: "" + lat + "|" + lon,
      ggslimit: limit,
      format: "json"
    };
    continueParams = {
      extracts: "excontinue",
      coordinates: "cocontinue"
    };
    if (queryContinue) {
      for (name in continueParams) {
        param = continueParams[name];
        if (queryContinue[name]) {
          q[param] = queryContinue[name][param];
        }
      }
    }
    return fetch(url, {
      params: q
    }, function(response) {
      var article, articleId, newValues, prop, resultsArticle, _ref;
      if (!results) {
        results = response;
      }
      if (!(response.query && response.query.pages)) {
        _convert(results, callback);
        return;
      }
      _ref = response.query.pages;
      for (articleId in _ref) {
        article = _ref[articleId];
        resultsArticle = results.query.pages[articleId];
        for (prop in continueParams) {
          if (prop === 'extracts') {
            prop = 'extract';
          }
          newValues = article[prop];
          if (!newValues) {
            continue;
          }
          if (Array.isArray(newValues)) {
            if (!resultsArticle[prop]) {
              resultsArticle[prop] = [];
            }
            resultsArticle[prop] = resultsArticle[prop].concat(newValues);
          } else {
            resultsArticle[prop] = article[prop];
          }
        }
      }
      if (response['query-continue']) {
        if (!queryContinue) {
          queryContinue = response['query-continue'];
        } else {
          for (name in continueParams) {
            param = continueParams[name];
            if (response['query-continue'][name]) {
              queryContinue[name] = response['query-continue'][name];
            }
          }
        }
        return _search(lat, lon, radius, limit, callback, results, queryContinue);
      } else {
        return _convert(results, callback);
      }
    });
  };

  _convert = function(results, callback) {
    var article, articleId, geo, image, titleEscaped, url, _ref;
    geo = {
      type: "FeatureCollection",
      features: []
    };
    if (!(results && results.query && results.query.pages)) {
      callback(geo);
      return;
    }
    _ref = results.query.pages;
    for (articleId in _ref) {
      article = _ref[articleId];
      if (!article.coordinates) {
        continue;
      }
      titleEscaped = article.title.replace(/\s/g, "_");
      url = "http://en.wikipedia.org/wiki/" + titleEscaped;
      if (article.pageprops) {
        image = article.pageprops.page_image;
      } else {
        image = null;
      }
      geo.features.push({
        id: url,
        type: "Feature",
        properties: {
          name: article.title,
          summary: article.extract,
          image: image
        },
        geometry: {
          type: "Point",
          coordinates: [Number(article.coordinates[0].lon), Number(article.coordinates[0].lat)]
        }
      });
    }
    callback(geo);
  };

  _fetch = function(uri, opts, callback) {
    return request(uri, {
      qs: opts.params,
      json: true
    }, function(e, r, data) {
      return callback(data);
    });
  };

  _browserFetch = function(uri, opts, callback) {
    return $.ajax({
      url: uri,
      data: opts.params,
      dataType: "jsonp",
      success: function(response) {
        return callback(response);
      }
    });
  };

  try {
    request = require('request');
    fetch = _fetch;
  } catch (error) {
    fetch = _browserFetch;
  }

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.geojson = geojson;

}).call(this);
